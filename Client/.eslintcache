[{"C:\\Users\\dynam\\Desktop\\Hackerrank Hackathon\\Testing_for_errors\\Full-Stack-Hackathon-HackerRank\\Client\\src\\index.js":"1","C:\\Users\\dynam\\Desktop\\Hackerrank Hackathon\\Testing_for_errors\\Full-Stack-Hackathon-HackerRank\\Client\\src\\App.js":"2","C:\\Users\\dynam\\Desktop\\Hackerrank Hackathon\\Testing_for_errors\\Full-Stack-Hackathon-HackerRank\\Client\\src\\components\\Navbar\\Navbar.js":"3","C:\\Users\\dynam\\Desktop\\Hackerrank Hackathon\\Testing_for_errors\\Full-Stack-Hackathon-HackerRank\\Client\\src\\reducers\\userDetailsReducer.js":"4","C:\\Users\\dynam\\Desktop\\Hackerrank Hackathon\\Testing_for_errors\\Full-Stack-Hackathon-HackerRank\\Client\\src\\components\\Routing.js":"5","C:\\Users\\dynam\\Desktop\\Hackerrank Hackathon\\Testing_for_errors\\Full-Stack-Hackathon-HackerRank\\Client\\src\\components\\Checkout\\Payment.js":"6","C:\\Users\\dynam\\Desktop\\Hackerrank Hackathon\\Testing_for_errors\\Full-Stack-Hackathon-HackerRank\\Client\\src\\components\\Menu\\Menu.js":"7","C:\\Users\\dynam\\Desktop\\Hackerrank Hackathon\\Testing_for_errors\\Full-Stack-Hackathon-HackerRank\\Client\\src\\components\\Profile\\Profile.js":"8","C:\\Users\\dynam\\Desktop\\Hackerrank Hackathon\\Testing_for_errors\\Full-Stack-Hackathon-HackerRank\\Client\\src\\components\\Success\\SuccessPage.js":"9","C:\\Users\\dynam\\Desktop\\Hackerrank Hackathon\\Testing_for_errors\\Full-Stack-Hackathon-HackerRank\\Client\\src\\components\\Auth\\Login\\SignIn.js":"10","C:\\Users\\dynam\\Desktop\\Hackerrank Hackathon\\Testing_for_errors\\Full-Stack-Hackathon-HackerRank\\Client\\src\\components\\Auth\\Registration\\RegForm.js":"11","C:\\Users\\dynam\\Desktop\\Hackerrank Hackathon\\Testing_for_errors\\Full-Stack-Hackathon-HackerRank\\Client\\src\\components\\FoodCards\\FoodCards.js":"12","C:\\Users\\dynam\\Desktop\\Hackerrank Hackathon\\Testing_for_errors\\Full-Stack-Hackathon-HackerRank\\Client\\src\\components\\Auth\\Registration\\PreviewForm.js":"13","C:\\Users\\dynam\\Desktop\\Hackerrank Hackathon\\Testing_for_errors\\Full-Stack-Hackathon-HackerRank\\Client\\src\\components\\FoodCards\\FoodItems.js":"14","C:\\Users\\dynam\\Desktop\\Hackerrank Hackathon\\Testing_for_errors\\Full-Stack-Hackathon-HackerRank\\Client\\src\\components\\Menu\\MenuFooter.js":"15"},{"size":228,"mtime":1611390443502,"results":"16","hashOfConfig":"17"},{"size":1374,"mtime":1611399896773,"results":"18","hashOfConfig":"17"},{"size":1449,"mtime":1611399896802,"results":"19","hashOfConfig":"17"},{"size":610,"mtime":1611390443506,"results":"20","hashOfConfig":"17"},{"size":1835,"mtime":1611427113558,"results":"21","hashOfConfig":"17"},{"size":1649,"mtime":1611481327083,"results":"22","hashOfConfig":"17"},{"size":6410,"mtime":1611481779831,"results":"23","hashOfConfig":"17"},{"size":1425,"mtime":1611482174971,"results":"24","hashOfConfig":"17"},{"size":942,"mtime":1611471243224,"results":"25","hashOfConfig":"17"},{"size":5204,"mtime":1611482373007,"results":"26","hashOfConfig":"17"},{"size":19031,"mtime":1611426521764,"results":"27","hashOfConfig":"17"},{"size":963,"mtime":1611399896785,"results":"28","hashOfConfig":"17"},{"size":1154,"mtime":1611467644902,"results":"29","hashOfConfig":"17"},{"size":1411,"mtime":1611399896786,"results":"30","hashOfConfig":"17"},{"size":585,"mtime":1611478321084,"results":"31","hashOfConfig":"17"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},"1agyc2g",{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"34"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"52","messages":"53","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"54","messages":"55","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"34"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"34"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"62","messages":"63","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"34"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\dynam\\Desktop\\Hackerrank Hackathon\\Testing_for_errors\\Full-Stack-Hackathon-HackerRank\\Client\\src\\index.js",[],["67","68"],"C:\\Users\\dynam\\Desktop\\Hackerrank Hackathon\\Testing_for_errors\\Full-Stack-Hackathon-HackerRank\\Client\\src\\App.js",[],"C:\\Users\\dynam\\Desktop\\Hackerrank Hackathon\\Testing_for_errors\\Full-Stack-Hackathon-HackerRank\\Client\\src\\components\\Navbar\\Navbar.js",[],"C:\\Users\\dynam\\Desktop\\Hackerrank Hackathon\\Testing_for_errors\\Full-Stack-Hackathon-HackerRank\\Client\\src\\reducers\\userDetailsReducer.js",[],"C:\\Users\\dynam\\Desktop\\Hackerrank Hackathon\\Testing_for_errors\\Full-Stack-Hackathon-HackerRank\\Client\\src\\components\\Routing.js",["69","70"],"import {useEffect,useContext} from 'react';\r\nimport {Route,Switch,useHistory} from 'react-router-dom';\r\nimport Menu from './Menu/Menu';\r\nimport SuccessPage from './Success/SuccessPage'\r\nimport Payment from \"./Checkout/Payment\";\r\nimport {UserDetailsContext} from \"../App\"\r\nimport SignIn from './Auth/Login/SignIn';\r\nimport RegForm from './Auth/Registration/RegForm';\r\nimport Profile from './Profile/Profile';\r\n\r\n//render component based on the nav link\r\nfunction Routing(){\r\n    //grab dispatch and state from context provider\r\n    const {state,dispatch} = useContext(UserDetailsContext);\r\n    const history = useHistory();\r\n\r\n    //on mounting of component check if user data already is availabe in localstorage\r\n    useEffect(() => {\r\n        //grab user data from localstorage\r\n        let userDetails = null;\r\n        if(localStorage.getItem(\"user\") === \"undefined\"){\r\n            userDetails = null;\r\n        }else{\r\n           userDetails = JSON.parse(localStorage.getItem(\"user\"));\r\n        }\r\n        //update redux state\r\n        dispatch({type:\"SET_USER_DETAILS\",payload:userDetails})\r\n\r\n        //based on the userData obtained from localstorage\r\n        if(userDetails === null){\r\n        //redirect to sign in page\r\n        history.push('/signin')\r\n        }\r\n        else{\r\n        //redirect to menu\r\n        //history.push('/menu')\r\n        }\r\n    }, [])\r\n\r\n    return(\r\n        <Switch>\r\n            <Route path = \"/signin\" component={SignIn}/>\r\n            <Route path = '/signup' component={RegForm}/>\r\n            <Route path = '/successpage/:id/:empid' component={SuccessPage}/>\r\n            <Route path = \"/menu\" component={Menu}/>\r\n            <Route path = \"/payment/:amount\" component={Payment}/>\r\n            <Route path = \"/profile\" component={Profile}/>\r\n        </Switch>\r\n    )\r\n}\r\n\r\nexport default Routing","C:\\Users\\dynam\\Desktop\\Hackerrank Hackathon\\Testing_for_errors\\Full-Stack-Hackathon-HackerRank\\Client\\src\\components\\Checkout\\Payment.js",["71"],"C:\\Users\\dynam\\Desktop\\Hackerrank Hackathon\\Testing_for_errors\\Full-Stack-Hackathon-HackerRank\\Client\\src\\components\\Menu\\Menu.js",[],"C:\\Users\\dynam\\Desktop\\Hackerrank Hackathon\\Testing_for_errors\\Full-Stack-Hackathon-HackerRank\\Client\\src\\components\\Profile\\Profile.js",[],"C:\\Users\\dynam\\Desktop\\Hackerrank Hackathon\\Testing_for_errors\\Full-Stack-Hackathon-HackerRank\\Client\\src\\components\\Success\\SuccessPage.js",[],"C:\\Users\\dynam\\Desktop\\Hackerrank Hackathon\\Testing_for_errors\\Full-Stack-Hackathon-HackerRank\\Client\\src\\components\\Auth\\Login\\SignIn.js",["72"],"C:\\Users\\dynam\\Desktop\\Hackerrank Hackathon\\Testing_for_errors\\Full-Stack-Hackathon-HackerRank\\Client\\src\\components\\Auth\\Registration\\RegForm.js",["73","74","75","76","77","78","79","80"],"import {useEffect, useState,useReducer, useContext} from 'react';\r\nimport {useHistory,Link} from 'react-router-dom'\r\nimport PreviewForm from './PreviewForm';\r\nimport { toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css'\r\nimport { UserDetailsContext } from '../../../App';\r\nimport \"./RegForm.css\"\r\ntoast.configure();\r\n\r\nfunction RegForm(){\r\n    var history = useHistory();\r\n    const [name,setName] = useState(\"\");\r\n    const [orgName,setOrgName] = useState(\"\");\r\n    const [empID,setEmpID] = useState(\"\");\r\n    const [mobNo,setMobNo] = useState(\"\");\r\n    const [email,setEmail] = useState(\"\");\r\n    const [password,setPassword] = useState(\"\");\r\n    const [confirmPassword,setConfirmPassword] = useState(\"\");\r\n    const [img,setImg] = useState(\".../..public/idCard.png\");\r\n    //this state variable will hold the temp url of the image uploaded\r\n    const [localImgUrl,setLocalImgUrl] = useState(\"./idCard.png\");\r\n    //this state variable will hold the errors for form validation\r\n    //each property will hold errors pertaining to that field\r\n    const [formErrors,setFormErrors] = useState({\r\n        name:{},\r\n        orgName:{},\r\n        empID:{},\r\n        mobNo:null,\r\n        email:{},\r\n        password:{},\r\n        img:{}\r\n    });\r\n    //this state will be used to display the error message\r\n    const [errMsgs,setErrMsgs] = useState(\"\");\r\n    //state to indicate completion of validation\r\n    const [comp,setComp] = useState(\"\");\r\n    //state to represent weather the inputs are all valid or not\r\n    const [valid,setValid] = useState(\"\");\r\n    //state to store loading element\r\n    const [load,setLoad] = useState(null);\r\n    //use the context to access state and dispatcher\r\n    const {state,dispatch} = useContext(UserDetailsContext);\r\n\r\n    //useEffect triggered when user clicks on submit button \r\n    //setStates are async and take a while to perform\r\n    useEffect(()=>{\r\n        //check if all inputs are valid\r\n        if(valid!==\"\" && valid){//all input fields are correct and to prevent execution on first time loading of useEffect\r\n            //promise \r\n            let imgURL= cloudinaryUploadPromise();\r\n            //after execution and getting result of promise that creates image url\r\n            imgURL.then(\r\n                (value)=>{\r\n                    //imgURL is the url of the image after uploading to cloudinary\r\n                    //console.log(\"value : \" + value)\r\n\r\n                    //create the form data,but no need to use form data since its not a file upload\r\n                    let data = {name:null,orgName:null,empid:null,mobno:null,email:null,imgURL:null};\r\n                    data.name = name;\r\n                    data.orgName = orgName;\r\n                    data.email = email;\r\n                    data.empID = empID;\r\n                    data.mobNo = mobNo;\r\n                    data.imgURL = value;\r\n                    data.password = password;\r\n                    \r\n                    //post data to server\r\n                    fetch('/signup',{\r\n                        method:\"POST\",\r\n                        headers:{\r\n                            'Accept': 'application/json',\r\n                            \"Content-Type\":\"application/json\"\r\n                            //add authorization\r\n                        },\r\n                        body:JSON.stringify(data)\r\n                        }).then((res)=>{\r\n                            /*console.log(res)\r\n                            console.log(\"res => \" + res + \" has type \" + typeof res);\r\n                            console.log(\"Before converting to json,id is \" + res.regID)*/\r\n                            //when using curly braces we need to return or else no need to return\r\n                            return res.json();\r\n                        }).then((serverData)=>{\r\n                            //console.log(serverData);\r\n                            //console.log(\"Server sent data with id \"+ serverData.regID)\r\n                            if(serverData.success){\r\n                                //console.log(\"server Db created a user....\");\r\n\r\n                                //grab regestration id of the user regestered at the database successfully\r\n                                const id = serverData.regID;\r\n                                //console.log(\"id from server \" + id)\r\n\r\n                                //create a toast for success\r\n                                toast.success(serverData.message)\r\n\r\n                                //store the user data\r\n                                dispatch({type:\"SET_USER_DETAILS\",payload:serverData.user})\r\n                                localStorage.setItem(\"user\",JSON.stringify(serverData.user));\r\n                                localStorage.setItem(\"jwt\",serverData.token);\r\n\r\n                                setTimeout(() => {\r\n                                    //navigate the user manually to the successpage\r\n                                    history.push('/successpage/' + id + \"/\" + empID);\r\n                                }, 2500);\r\n                            }else{\r\n                                //ToDo : create a toast for failure\r\n                                toast.error(serverData.message);\r\n                                setLoad(null);\r\n                                //console.log(\"Server sent error \" + serverData.error)\r\n                            }\r\n                        }).catch((err)=>{\r\n                            console.error(err);\r\n                        })\r\n                    },\r\n                (error)=>{\r\n                    console.log(error);\r\n                }\r\n            )\r\n        }else if(valid === false){ //if input fields are not valid ie valid state is set to false\r\n            let temp = [];\r\n            //var to give unique key value to react elements\r\n            let i =0;\r\n            //console.log(\"FormErrors state : \" + JSON.stringify(formErrors));\r\n            //iterate through FormErrors object\r\n            for(const property in formErrors){\r\n                //console.log(\"formErrors[property]\" + JSON.stringify(formErrors[property]));\r\n\r\n                //if no form error for a particular iput field,do nothing\r\n                if(formErrors[property] === {}){\r\n\r\n                }else{\r\n                    //capture the error name and error message\r\n                    let errObj = formErrors[property];\r\n                    //console.log(\"errObj\" + JSON.stringify(errObj));\r\n                    if(errObj === {}){\r\n\r\n                    }else{\r\n                        //iterate through the particular error of the input field\r\n                        for(const errProp in errObj){\r\n                            //console.log(\"error property \" + errProp)\r\n                            //capture the error message\r\n                            let theErr = errObj[errProp];\r\n                            //console.log(\"The error \" + theErr)\r\n                            //use toast instead in final touches\r\n                            //create a error div\r\n                            toast.error(theErr);\r\n                            temp.push(<h6 key={i++} style={{color:'red'}}>{theErr}</h6>)\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            ///console.log(\"Setting error message...\")\r\n            //set all the errors captured\r\n            setErrMsgs(temp);\r\n        }\r\n        //dependent on the user click\r\n    },[comp])\r\n\r\n    function cloudinaryUploadPromise(){\r\n        //return a new Promise since it takes time to complete\r\n        return new Promise((resolve,reject)=>{\r\n            //for file upload (image here) we need to use form data\r\n            console.log(\"Uploading to cloudinary....\")\r\n            const fd = new FormData();\r\n            fd.append(\"file\",img);\r\n            fd.append(\"upload_preset\",\"officeCafeteria\");\r\n            fd.append(\"cloud_name\",\"chandracloudinarystorage123\");\r\n            //loading bar\r\n            setLoad(<div className=\"progress\">\r\n                        <div className=\"indeterminate\"></div>\r\n                    </div>)\r\n            fetch(\"https://api.cloudinary.com/v1_1/chandracloudinarystorage123/image/upload\",{\r\n                method:\"POST\",\r\n                body:fd\r\n            }).then(res=>res.json()).then(data=>{\r\n                console.log(data);\r\n                resolve(data.url);\r\n            }).catch(err=>{\r\n                console.log(err);\r\n                reject(err);\r\n            });\r\n        })\r\n    }\r\n\r\n    function formValidation(event){\r\n        //prevent form submission\r\n        event.preventDefault()\r\n\r\n        //temp variable to store different errors associated with each input field\r\n        let temp = {\r\n            name:{},\r\n            orgName:{},\r\n            empID:{},\r\n            mobNo:{},\r\n            email:{},\r\n            password:{},\r\n            img:{}\r\n        };\r\n\r\n        //default image for id card\r\n        const defaultIMG = \".../..public/idCard.png\"\r\n        //clear error messages\r\n        setErrMsgs(\"\");\r\n\r\n        //flag to detect occurence of atleast one error in form fields\r\n        let isValid = true;\r\n        \r\n        //console.log(\"img ....... : \" + img);\r\n        //check for empty fields\r\n        if(name === \"\" || orgName === \"\" || empID === \"\" || mobNo === \"\" || email === \"\" || img === defaultIMG || password === \"\" || confirmPassword === \"\"){\r\n            //console.log(\"Some empty fields..\");\r\n            isValid = false;\r\n\r\n            //this will store the input form states in key value pair for easy printing of error\r\n            let copyData = {\r\n                name,\r\n                orgName,\r\n                empID,\r\n                mobNo,\r\n                email,\r\n                password,\r\n                confirmPassword,\r\n                img\r\n            };\r\n\r\n            //check for the empty input form field or default image\r\n            for(const prop in copyData){\r\n                //console.log(typeof prop)\r\n                if(copyData[prop] === \"\" || copyData[prop] === defaultIMG){\r\n                    if(prop !== \"confirmPassword\")\r\n                        //attach error to emptyField property\r\n                        temp[prop].emptyField = `${prop} is required`;\r\n                    else{\r\n                        temp[\"password\"].emptyField = `conform your password please`\r\n                    }\r\n                }\r\n            }\r\n            //console.log(\"temp var \" + JSON.stringify(temp));\r\n            //update the FormErrors state\r\n            setFormErrors(temp)\r\n            //console.log(\"FormErrors var after setting : \" + JSON.stringify(formErrors))\r\n            //return isValid;\r\n            //set the state representing weather form inputs are valid\r\n            setValid(isValid);\r\n            setComp(comp + \"1\");\r\n            return;\r\n        }\r\n\r\n        //remove white spaces and check for length of name\r\n        if(name.trim().length < 5){\r\n            //console.log(\"Name should be atleast 5 characters long\");\r\n            temp.name.shortName = \"Name should be atleast 5 characters long\";\r\n            isValid = false;\r\n        }\r\n\r\n        //if name has integers\r\n        for(let i = 0;i<name.length;i++){\r\n            //if not (not a number) === a number or is not a space\r\n            if(!isNaN(name[i]) && name[i]!==\" \"){\r\n                //console.log(\"Name should not contain numbers\")\r\n                temp.name.nameNumber = \"Name should not contain numbers\";\r\n                isValid = false;\r\n                break;\r\n            }\r\n        }\r\n\r\n        //mobile number cannot contain letters\r\n        for(let i = 0;i<mobNo.length;i++){\r\n            //if not a number === a letter\r\n            if(isNaN(mobNo[i])){\r\n                //console.log(\"Mobile Number should not have alphabets\")\r\n                temp.mobNo.mobAlpha = \"Mobile Number should not have alphabets\"\r\n                isValid = false;\r\n                break;\r\n            }\r\n        }\r\n\r\n        //email should have '@' and . followed by string\r\n        let at = false;\r\n        let dot = false;\r\n        for(let i = 0;i<email.length;i++){\r\n            if(email[i] === '@'){\r\n                at = true;\r\n            }\r\n            if(email[i] === '.'){\r\n                //check if there is string after .\r\n                console.log(\"email length is ...... : \" + email.length)\r\n                if(i+1 < email.length && isNaN(email[i+1]) === true){\r\n                    dot = true;\r\n                }\r\n            }\r\n        }\r\n\r\n        //check for @ after searching entire string\r\n        if(!at){\r\n            isValid = false;\r\n            temp.email.atErr = \"Email should contain @ symbol\";\r\n        }\r\n        if(!dot){\r\n            isValid = false;\r\n            //console.log(\"Setting.....\")\r\n            temp.email.dotErr = \"Email should contain . and string after that\";\r\n        }\r\n\r\n        //check for password and confirm password match\r\n        if(password !== confirmPassword){\r\n            isValid = false;\r\n            temp.password.donotMatchErr = \"Passwords do not match\";\r\n        }else{\r\n            //passwords match,check for length of passwords\r\n            if(password.length<12){\r\n                isValid = false;\r\n                temp.password.shortPass = \"Password must be atleast 12 characters long\";\r\n            }else{\r\n                //password is fine lenght,check for spaces in password as not allowed\r\n                for(let i = 0;i<password.length;i++){\r\n                    if(password[i] === \" \"){\r\n                        isValid = false;\r\n                        temp.password.spaceErr = \"Spaces in password not allowed\";\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        //check for format of image uploaded\r\n        let imgNameArr =  img.name.split(\".\");\r\n        let fileType = imgNameArr[imgNameArr.length - 1];\r\n        //console.log(\"File type \" + fileType);\r\n        if(fileType === \"png\" || fileType === \"jpeg\" || fileType === 'jpg'){\r\n\r\n        }else{\r\n            temp.img.typeErr = \"Image should be of the format png or jpeg\";\r\n            isValid = false;\r\n        }\r\n\r\n        //set the formErrors state\r\n        //console.log(\"Temp variable : \" + JSON.stringify(temp));\r\n        setFormErrors(temp);\r\n\r\n        //set isValid;\r\n        //console.log(\"setting valid..\")\r\n        setValid(isValid);\r\n        //state that changes when user clicks submit button everytime so that useEffect kicks in.This is because setState is async and doesnt happen instantaneously,hence we need to use useEffect to trigger submission of form if all input fields are valid\r\n        setComp(comp + \"1\");\r\n    }\r\n\r\n    function onChangeHandler(event){\r\n        //validate the form data using regex\r\n        switch (event.target.id) {\r\n            case \"name-input\":\r\n                setName(event.target.value);\r\n                break;\r\n            case \"org-input\":\r\n                setOrgName(event.target.value);\r\n                break;\r\n            case \"empid-input\":\r\n                setEmpID(event.target.value);\r\n                break;\r\n            case \"mobno-input\":\r\n                setMobNo(event.target.value);\r\n                break;\r\n            case \"email-input\":\r\n                setEmail(event.target.value);\r\n                break;\r\n            case \"pass-input\":\r\n                setPassword(event.target.value);\r\n                break;\r\n            case \"confirm-pass-input\":\r\n                setConfirmPassword(event.target.value);\r\n                break;\r\n            case \"img-input\":\r\n                setImg(event.target.files[0]);\r\n                console.log(event.target.files[0].name)\r\n                //creating local copy url of the image uploaded\r\n                setLocalImgUrl(window.URL.createObjectURL(event.target.files[0]))\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n    return(\r\n        <div className=\"container-registration\">\r\n            {load}\r\n            <div className=\"regWrapper\">\r\n                <div className='regform-content-left'>\r\n                    <PreviewForm previewData={[name,orgName,empID,mobNo,email,localImgUrl]}/>\r\n                </div>\r\n                <div className=\"regform-content-right\">\r\n                    <form>\r\n                        <h1 className=\"register\">Register Now!</h1>\r\n                        <div className=\"input-field\">\r\n                            <input className=\"reg\" required={true} type=\"text\" value={name} placeholder=\"Name\" onChange={(event)=>onChangeHandler(event)} id=\"name-input\"/>\r\n                        </div>\r\n                        <div className=\"input-field\">\r\n                            <input className=\"reg\" required={true} type=\"text\" value={orgName} placeholder=\"Organization Name\" onChange={(event)=>onChangeHandler(event)} id=\"org-input\"/>\r\n                        </div>\r\n                        <div className=\"input-field\">\r\n                            <input className=\"reg\" required={true} type=\"text\" value={empID} placeholder=\"Employee ID\" onChange={(event)=>onChangeHandler(event)} id=\"empid-input\"/>\r\n                        </div>\r\n                        <div className=\"input-field\">\r\n                            <input className=\"reg\" required={true} type=\"text\" value={mobNo} placeholder=\"Mobile Number\" onChange={(event)=>onChangeHandler(event)} id=\"mobno-input\"/>\r\n                        </div>\r\n                        <div className=\"input-field\">\r\n                            <input className=\"reg\" required={true} type=\"text\" value={email} placeholder=\"Email\" onChange={(event)=>onChangeHandler(event)} id=\"email-input\"/>\r\n                        </div>\r\n                        <div className=\"input-field\">\r\n                            <input className=\"reg\" required={true} type=\"text\" type='password' value={password} placeholder=\"Password\" onChange={(event)=>onChangeHandler(event)} id=\"pass-input\"/>\r\n                        </div>\r\n                        <div className=\"input-field\">\r\n                            <input className=\"reg\" required={true} type=\"text\" type='password' value={confirmPassword} placeholder=\"Confirm Password\" onChange={(event)=>onChangeHandler(event)} id=\"confirm-pass-input\"/>\r\n                        </div>\r\n                        Upload ID Card\r\n                        <div>\r\n                            <input className=\"reg\" className=\"upload\" required={true} type=\"file\" onChange={(event)=>onChangeHandler(event)} id=\"img-input\"/>\r\n                        </div>\r\n                        <input type = \"button\" className=\"reg\" className='submit' onClick={(event)=>formValidation(event)} value=\"SIGN UP\"></input>\r\n                        <br/> <br/>\r\n                        <Link  className=\"already\" to=\"/signin\">Already Have an account?</Link>\r\n                    </form>\r\n                </div>\r\n            </div>\r\n        </div>          \r\n    )\r\n}\r\n\r\nexport default RegForm;","C:\\Users\\dynam\\Desktop\\Hackerrank Hackathon\\Testing_for_errors\\Full-Stack-Hackathon-HackerRank\\Client\\src\\components\\FoodCards\\FoodCards.js",["81"],"import React, {useContext} from 'react';\r\nimport './FoodCards.css';\r\nimport FoodItem from './FoodItems';\r\n\r\n\r\nfunction FoodCards(props) {\r\n  const map = props.menu.items.map((item,id)=>{\r\n                return [\r\n                    <FoodItem\r\n                      key = {id}\r\n                      src='/food.jpg'\r\n                      text={item.name}\r\n                      description = {item.description}\r\n                      label='Not spicy'\r\n                      addItem={props.addItem}\r\n                      removeItem={props.removeItem}\r\n                      price={item.price}\r\n                      count={item.quantity}\r\n                      category={props.menu.category}\r\n                    />\r\n                ]\r\n          });\r\n  return (\r\n    <div className='foodMenu'>      \r\n      <h3 className=\"menu-category\">{props.menu.category}</h3>\r\n      <ul className='foodContainer'>{map}</ul>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default FoodCards;","C:\\Users\\dynam\\Desktop\\Hackerrank Hackathon\\Testing_for_errors\\Full-Stack-Hackathon-HackerRank\\Client\\src\\components\\Auth\\Registration\\PreviewForm.js",[],"C:\\Users\\dynam\\Desktop\\Hackerrank Hackathon\\Testing_for_errors\\Full-Stack-Hackathon-HackerRank\\Client\\src\\components\\FoodCards\\FoodItems.js",["82"],"import React from 'react';\r\n\r\nfunction FoodItem(props) {\r\n  return (\r\n    \r\n      <li className='foodItem'>\r\n        <div className='foodItemContainer'>\r\n          <figure className='games__item__pic-wrap' price={\"₹\"+props.price}>\r\n            <img\r\n              className='food-item-img'\r\n              src={props.src}\r\n            />\r\n          </figure>\r\n          <div className='food-item-info'>\r\n            <h5 className='food-item-name'>{props.text}</h5>\r\n            <div className=\"count-container\">\r\n              {props.count > 0? <>\r\n                  <button className=\"count neg\" onClick={(event) => {\r\n                    event.preventDefault();\r\n                    props.removeItem(props);\r\n                    }}>-</button>\r\n                  <input className=\"count-val\" type=\"text\" value={props.count}/>\r\n                  <button className=\"count pos\" onClick={(event) => {\r\n                    event.preventDefault();\r\n                    props.addItem(props);\r\n                    }}>+</button></>\r\n              :\r\n              <button className=\"add-cart\" onClick={(event) => {\r\n                event.preventDefault();\r\n                props.addItem(props);\r\n                }}>Add To Cart</button>\r\n              }\r\n              \r\n            </div>\r\n            <p>{props.description}</p>\r\n          </div>\r\n        </div>\r\n      </li>\r\n    \r\n  );\r\n}\r\n\r\nexport default FoodItem;","C:\\Users\\dynam\\Desktop\\Hackerrank Hackathon\\Testing_for_errors\\Full-Stack-Hackathon-HackerRank\\Client\\src\\components\\Menu\\MenuFooter.js",[],{"ruleId":"83","replacedBy":"84"},{"ruleId":"85","replacedBy":"86"},{"ruleId":"87","severity":1,"message":"88","line":14,"column":12,"nodeType":"89","messageId":"90","endLine":14,"endColumn":17},{"ruleId":"91","severity":1,"message":"92","line":38,"column":8,"nodeType":"93","endLine":38,"endColumn":10,"suggestions":"94"},{"ruleId":"87","severity":1,"message":"95","line":1,"column":10,"nodeType":"89","messageId":"90","endLine":1,"endColumn":18},{"ruleId":"87","severity":1,"message":"88","line":16,"column":12,"nodeType":"89","messageId":"90","endLine":16,"endColumn":17},{"ruleId":"87","severity":1,"message":"96","line":1,"column":29,"nodeType":"89","messageId":"90","endLine":1,"endColumn":39},{"ruleId":"87","severity":1,"message":"97","line":34,"column":12,"nodeType":"89","messageId":"90","endLine":34,"endColumn":19},{"ruleId":"87","severity":1,"message":"88","line":42,"column":12,"nodeType":"89","messageId":"90","endLine":42,"endColumn":17},{"ruleId":"91","severity":1,"message":"98","line":156,"column":7,"nodeType":"93","endLine":156,"endColumn":13,"suggestions":"99"},{"ruleId":"100","severity":1,"message":"101","line":408,"column":80,"nodeType":"102","endLine":408,"endColumn":95},{"ruleId":"100","severity":1,"message":"101","line":411,"column":80,"nodeType":"102","endLine":411,"endColumn":95},{"ruleId":"100","severity":1,"message":"101","line":415,"column":52,"nodeType":"102","endLine":415,"endColumn":70},{"ruleId":"100","severity":1,"message":"101","line":417,"column":64,"nodeType":"102","endLine":417,"endColumn":82},{"ruleId":"87","severity":1,"message":"103","line":1,"column":16,"nodeType":"89","messageId":"90","endLine":1,"endColumn":26},{"ruleId":"104","severity":1,"message":"105","line":9,"column":13,"nodeType":"106","endLine":12,"endColumn":15},"no-native-reassign",["107"],"no-negated-in-lhs",["108"],"no-unused-vars","'state' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'dispatch' and 'history'. Either include them or remove the dependency array.","ArrayExpression",["109"],"'useState' is defined but never used.","'useReducer' is defined but never used.","'errMsgs' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'cloudinaryUploadPromise', 'dispatch', 'email', 'empID', 'formErrors', 'history', 'mobNo', 'name', 'orgName', 'password', and 'valid'. Either include them or remove the dependency array.",["110"],"react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","'useContext' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-global-assign","no-unsafe-negation",{"desc":"111","fix":"112"},{"desc":"113","fix":"114"},"Update the dependencies array to be: [dispatch, history]",{"range":"115","text":"116"},"Update the dependencies array to be: [cloudinaryUploadPromise, comp, dispatch, email, empID, formErrors, history, mobNo, name, orgName, password, valid]",{"range":"117","text":"118"},[1366,1368],"[dispatch, history]",[7474,7480],"[cloudinaryUploadPromise, comp, dispatch, email, empID, formErrors, history, mobNo, name, orgName, password, valid]"]