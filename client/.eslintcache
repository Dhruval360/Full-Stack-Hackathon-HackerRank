[{"/home/dhruval/Desktop/Projects/Hackathons/HakerRank/Full-Stack-Hackathon-HackerRank/client/src/index.js":"1","/home/dhruval/Desktop/Projects/Hackathons/HakerRank/Full-Stack-Hackathon-HackerRank/client/src/App.js":"2","/home/dhruval/Desktop/Projects/Hackathons/HakerRank/Full-Stack-Hackathon-HackerRank/client/src/reportWebVitals.js":"3","/home/dhruval/Desktop/Projects/Hackathons/HakerRank/Full-Stack-Hackathon-HackerRank/client/src/components/Navbar.js":"4","/home/dhruval/Desktop/Projects/Hackathons/HakerRank/Full-Stack-Hackathon-HackerRank/client/src/components/RegForm.js":"5","/home/dhruval/Desktop/Projects/Hackathons/HakerRank/Full-Stack-Hackathon-HackerRank/client/src/components/SuccessPage.js":"6","/home/dhruval/Desktop/Projects/Hackathons/HakerRank/Full-Stack-Hackathon-HackerRank/client/src/components/SignIn.js":"7","/home/dhruval/Desktop/Projects/Hackathons/HakerRank/Full-Stack-Hackathon-HackerRank/client/src/components/Menu.js":"8","/home/dhruval/Desktop/Projects/Hackathons/HakerRank/Full-Stack-Hackathon-HackerRank/client/src/components/Payment.js":"9","/home/dhruval/Desktop/Projects/Hackathons/HakerRank/Full-Stack-Hackathon-HackerRank/client/src/components/PreviewForm.js":"10","/home/dhruval/Desktop/Projects/Hackathons/HakerRank/Full-Stack-Hackathon-HackerRank/client/src/components/FoodCards/FoodItems.js":"11","/home/dhruval/Desktop/Projects/Hackathons/HakerRank/Full-Stack-Hackathon-HackerRank/client/src/components/FoodCards/FoodCards.js":"12","/home/dhruval/Desktop/Projects/Hackathons/HakerRank/Full-Stack-Hackathon-HackerRank/client/src/components/Routing.js":"13","/home/dhruval/Desktop/Projects/Hackathons/HakerRank/Full-Stack-Hackathon-HackerRank/client/src/reducers/userDetailsReducer.js":"14"},{"size":500,"mtime":1610459532460,"results":"15","hashOfConfig":"16"},{"size":893,"mtime":1610910843162,"results":"17","hashOfConfig":"16"},{"size":362,"mtime":1610459532460,"results":"18","hashOfConfig":"16"},{"size":1125,"mtime":1610915354417,"results":"19","hashOfConfig":"16"},{"size":15662,"mtime":1610912414689,"results":"20","hashOfConfig":"16"},{"size":1183,"mtime":1610910843189,"results":"21","hashOfConfig":"16"},{"size":3627,"mtime":1610911759303,"results":"22","hashOfConfig":"16"},{"size":5475,"mtime":1610915184817,"results":"23","hashOfConfig":"16"},{"size":1614,"mtime":1610459532460,"results":"24","hashOfConfig":"16"},{"size":850,"mtime":1610912245368,"results":"25","hashOfConfig":"16"},{"size":947,"mtime":1610897961333,"results":"26","hashOfConfig":"16"},{"size":969,"mtime":1610907459737,"results":"27","hashOfConfig":"16"},{"size":1623,"mtime":1610910843189,"results":"28","hashOfConfig":"16"},{"size":591,"mtime":1610910843189,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},"bfody7",{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"39","messages":"40","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"32"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"32"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"32"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"32"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"32"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},"/home/dhruval/Desktop/Projects/Hackathons/HakerRank/Full-Stack-Hackathon-HackerRank/client/src/index.js",[],["64","65"],"/home/dhruval/Desktop/Projects/Hackathons/HakerRank/Full-Stack-Hackathon-HackerRank/client/src/App.js",[],"/home/dhruval/Desktop/Projects/Hackathons/HakerRank/Full-Stack-Hackathon-HackerRank/client/src/reportWebVitals.js",[],"/home/dhruval/Desktop/Projects/Hackathons/HakerRank/Full-Stack-Hackathon-HackerRank/client/src/components/Navbar.js",[],"/home/dhruval/Desktop/Projects/Hackathons/HakerRank/Full-Stack-Hackathon-HackerRank/client/src/components/RegForm.js",["66","67","68","69"],"import {useEffect, useState,useReducer, useContext} from 'react';\nimport {useHistory,Link} from 'react-router-dom'\nimport PreviewForm from './PreviewForm';\nimport { toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css'\nimport { UserDetailsContext } from '../App';\ntoast.configure();\n\nfunction RegForm(){\n    var history = useHistory();\n    const [name,setName] = useState(\"\");\n    const [orgName,setOrgName] = useState(\"\");\n    const [empID,setEmpID] = useState(\"\");\n    const [mobNo,setMobNo] = useState(\"\");\n    const [email,setEmail] = useState(\"\");\n    const [img,setImg] = useState(\".../..public/idCard.png\");\n    //this state variable will hold the temp url of the image uploaded\n    const [localImgUrl,setLocalImgUrl] = useState(\"./idCard.png\");\n    //this state variable will hold the errors for form validation\n    //each property will hold errors pertaining to that field\n    const [formErrors,setFormErrors] = useState({\n        name:{},\n        orgName:{},\n        empID:{},\n        mobNo:null,\n        email:{},\n        img:{}\n    });\n    //this state will be used to display the error message\n    const [errMsgs,setErrMsgs] = useState(\"\");\n    //state to indicate completion of validation\n    const [comp,setComp] = useState(\"\");\n    //state to represent weather the inputs are all valid or not\n    const [valid,setValid] = useState(\"\");\n    //state to store loading element\n    const [load,setLoad] = useState(null);\n    //use the context to access state and dispatcher\n    const {state,dispatch} = useContext(UserDetailsContext);\n\n    //useEffect triggered when user clicks on submit button \n    //setStates are async and take a while to perform\n    useEffect(()=>{\n        //check if all inputs are valid\n        if(valid!==\"\" && valid){//all input fields are correct\n            //promise \n            let imgURL= cloudinaryUploadPromise();\n            //after execution and getting result of promise that creates image url\n            imgURL.then(\n                (value)=>{\n                    //imgURL is the url of the image after uploading to cloudinary\n                    //console.log(\"value : \" + value)\n\n                    //create the form data,but no need to use form data since its not a file upload\n                    let data = {name:null,orgName:null,empid:null,mobno:null,email:null,imgURL:null};\n                    data.name = name;\n                    data.orgName = orgName;\n                    data.email = email;\n                    data.empID = empID;\n                    data.mobNo = mobNo;\n                    data.imgURL = value;\n                    \n                    //post data to server\n                    fetch('/signup',{\n                        method:\"POST\",\n                        headers:{\n                            'Accept': 'application/json',\n                            \"Content-Type\":\"application/json\"\n                            //add authorization\n                        },\n                        body:JSON.stringify(data)\n                        }).then((res)=>{\n                            /*console.log(res)\n                            console.log(\"res => \" + res + \" has type \" + typeof res);\n                            console.log(\"Before converting to json,id is \" + res.regID)*/\n                            //when using curly braces we need to return or else no need to return\n                            return res.json();\n                        }).then((serverData)=>{\n                            //console.log(serverData);\n                            //console.log(\"Server sent data with id \"+ serverData.regID)\n                            if(serverData.success){\n                                //console.log(\"server Db created a user....\");\n\n                                //grab regestration id of the user regestered at the database successfully\n                                const id = serverData.regID;\n                                //console.log(\"id from server \" + id)\n\n                                //create a toast for success\n                                toast.success(serverData.message)\n\n                                //store the user data\n                                dispatch({type:\"SET_USER_DETAILS\",payload:serverData.user})\n                                localStorage.setItem(\"user\",JSON.stringify(serverData.user));\n                                localStorage.setItem(\"jwt\",serverData.token);\n\n                                setTimeout(() => {\n                                    //navigate the user manually to the successpage\n                                    history.push('/successpage/' + id + \"/\" + empID);\n                                }, 2500);\n                            }else{\n                                //ToDo : create a toast for failure\n                                toast.error(serverData.message);\n                                setLoad(null);\n                                //console.log(\"Server sent error \" + serverData.error)\n                            }\n                        }).catch((err)=>{\n                            console.error(err);\n                        })\n                    },\n                (error)=>{\n                    console.log(error);\n                }\n            )\n        }else if(valid === false){ //if input fields are not valid ie valid state is set to false\n            let temp = [];\n            //var to give unique key value to react elements\n            let i =0;\n            //console.log(\"FormErrors state : \" + JSON.stringify(formErrors));\n            //iterate through FormErrors object\n            for(const property in formErrors){\n                //console.log(\"formErrors[property]\" + JSON.stringify(formErrors[property]));\n\n                //if no form error for a particular iput field,do nothing\n                if(formErrors[property] === {}){\n\n                }else{\n                    //capture the error name and error message\n                    let errObj = formErrors[property];\n                    //console.log(\"errObj\" + JSON.stringify(errObj));\n                    if(errObj === {}){\n\n                    }else{\n                        //iterate through the particular error of the input field\n                        for(const errProp in errObj){\n                            //console.log(\"error property \" + errProp)\n                            //capture the error message\n                            let theErr = errObj[errProp];\n                            //console.log(\"The error \" + theErr)\n                            //use toast instead in final touches\n                            //create a error div\n                            toast.error(theErr);\n                            temp.push(<h6 key={i++} style={{color:'red'}}>{theErr}</h6>)\n                        }\n                    }\n                }\n            }\n            ///console.log(\"Setting error message...\")\n            //set all the errors captured\n            setErrMsgs(temp);\n        }\n        //dependent on the user click\n    },[comp])\n\n    function cloudinaryUploadPromise(){\n        //return a new Promise since it takes time to complete\n        return new Promise((resolve,reject)=>{\n            //for file upload (image here) we need to use form data\n            console.log(\"Uploading to cloudinary....\")\n            const fd = new FormData();\n            fd.append(\"file\",img);\n            fd.append(\"upload_preset\",\"officeCafeteria\");\n            fd.append(\"cloud_name\",\"chandracloudinarystorage123\");\n            //loading bar\n            setLoad(<div className=\"progress\">\n                        <div className=\"indeterminate\"></div>\n                    </div>)\n            fetch(\"https://api.cloudinary.com/v1_1/chandracloudinarystorage123/image/upload\",{\n                method:\"POST\",\n                body:fd\n            }).then(res=>res.json()).then(data=>{\n                console.log(data);\n                resolve(data.url);\n            }).catch(err=>{\n                console.log(err);\n                reject(err);\n            });\n        })\n    }\n\n    function formValidation(){\n        //temp variable to store different errors associated with each input field\n        let temp = {\n            name:{},\n            orgName:{},\n            empID:{},\n            mobNo:{},\n            email:{},\n            img:{}\n        };\n\n        //default image for id card\n        const defaultIMG = \".../..public/idCard.png\"\n        //clear error messages\n        setErrMsgs(\"\");\n\n        //flag to detect occurence of atleast one error in form fields\n        let isValid = true;\n        \n        //console.log(\"img ....... : \" + img);\n        //check for empty fields\n        if(name === \"\" || orgName === \"\" || empID === \"\" || mobNo === \"\" || email === \"\" || img === defaultIMG){\n            //console.log(\"Some empty fields..\");\n            isValid = false;\n\n            //this will store the input form states in key value pair\n            let copyData = {\n                name,\n                orgName,\n                empID,\n                mobNo,\n                email,\n                img\n            };\n\n            //check for atleast one empty input form field\n            for(const prop in copyData){\n                //console.log(typeof prop)\n                if(copyData[prop] === \"\" || copyData[prop] === defaultIMG){\n                    //attach error to emptyField property\n                    temp[prop].emptyField = `${prop} is required`;\n                }\n            }\n            //console.log(\"temp var \" + JSON.stringify(temp));\n            //update the FormErrors state\n            setFormErrors(temp)\n            //console.log(\"FormErrors var after setting : \" + JSON.stringify(formErrors))\n            //return isValid;\n            //set the state representing weather form inputs are valid\n            setValid(isValid);\n            setComp(comp + \"1\");\n            return;\n        }\n\n        //remove white spaces and check for length of name\n        if(name.trim().length < 5){\n            //console.log(\"Name should be atleast 5 characters long\");\n            temp.name.shortName = \"Name should be atleast 5 characters long\";\n            isValid = false;\n        }\n\n        //if name has integers\n        for(let i = 0;i<name.length;i++){\n            //if not (not a number) === a number\n            if(!isNaN(name[i])){\n                //console.log(\"Name should not contain numbers\")\n                temp.name.nameNumber = \"Name should not contain numbers\";\n                isValid = false;\n                break;\n            }\n        }\n\n        //mobile number cannot contain letters\n        for(let i = 0;i<mobNo.length;i++){\n            //if not a number === a letter\n            if(isNaN(mobNo[i])){\n                //console.log(\"Mobile Number should not have alphabets\")\n                temp.mobNo.mobAlpha = \"Mobile Number should not have alphabets\"\n                isValid = false;\n                break;\n            }\n        }\n\n        //email should have '@' and . followed by string\n        let at = false;\n        let dot = false;\n        for(let i = 0;i<email.length;i++){\n            if(email[i] === '@'){\n                at = true;\n            }\n            if(email[i] === '.'){\n                //check if there is string after .\n                console.log(\"email length is ...... : \" + email.length)\n                if(i+1 < email.length && isNaN(email[i+1]) === true){\n                    dot = true;\n                }\n            }\n        }\n\n        //check for @ after searching entire string\n        if(!at){\n            isValid = false;\n            temp.email.atErr = \"Email should contain @ symbol\";\n        }\n        if(!dot){\n            isValid = false;\n            //console.log(\"Setting.....\")\n            temp.email.dotErr = \"Email should contain . and string after that\";\n        }\n\n        //check for format of image uploaded\n        let imgNameArr =  img.name.split(\".\");\n        let fileType = imgNameArr[imgNameArr.length - 1];\n        //console.log(\"File type \" + fileType);\n        if(fileType === \"png\" || fileType === \"jpeg\" || fileType === 'jpg'){\n\n        }else{\n            temp.img.typeErr = \"Image should be of the format png or jpeg\";\n            isValid = false;\n        }\n\n        //set the formErrors state\n        //console.log(\"Temp variable : \" + JSON.stringify(temp));\n        setFormErrors(temp);\n\n        //set isValid;\n        //console.log(\"setting valid..\")\n        setValid(isValid);\n        //state that changes when user clicks submit button everytime so that useEffect kicks in.This is because setState is async and doesnt happen instantaneously,hence we need to use useEffect to trigger submission of form if all input fields are valid\n        setComp(comp + \"1\");\n    }\n\n    function onChangeHandler(event){\n        //validate the form data using regex\n        switch (event.target.id) {\n            case \"name-input\":\n                setName(event.target.value);\n                break;\n            case \"org-input\":\n                setOrgName(event.target.value);\n                break;\n            case \"empid-input\":\n                setEmpID(event.target.value);\n                break;\n            case \"mobno-input\":\n                setMobNo(event.target.value);\n                break;\n            case \"email-input\":\n                setEmail(event.target.value);\n                break;\n            case \"img-input\":\n                setImg(event.target.files[0]);\n                console.log(event.target.files[0].name)\n                setLocalImgUrl(window.URL.createObjectURL(event.target.files[0]))\n                break;\n            default:\n                break;\n        }\n    }\n\n    return(\n        <div className=\"registration\">\n        <div className=\"container-registration\">\n            {load}\n            <form className=\"registration-form\">\n                <h1>Registration Form</h1>\n                <div className=\"input-field\">\n                    <input type=\"text\" value={name} placeholder=\"Name\" onChange={(event)=>onChangeHandler(event)} id=\"name-input\"/>\n                </div>\n                <div className=\"input-field\">\n                    <input type=\"text\" value={orgName} placeholder=\"Organization Name\" onChange={(event)=>onChangeHandler(event)} id=\"org-input\"/>\n                </div>\n                <div className=\"input-field\">\n                    <input type=\"text\" value={empID} placeholder=\"Employee ID\" onChange={(event)=>onChangeHandler(event)} id=\"empid-input\"/>\n                </div>\n                <div className=\"input-field\">\n                    \n                </div>\n                <div className=\"input-field\">\n                    <input type=\"text\" value={mobNo} placeholder=\"Mobile Number\" onChange={(event)=>onChangeHandler(event)} id=\"mobno-input\"/>\n                </div>\n                <div className=\"input-field\">\n                    <input type=\"text\" value={email} placeholder=\"Email\" onChange={(event)=>onChangeHandler(event)} id=\"email-input\"/>\n                </div>\n                <div>Upload ID Card</div>\n                <div className=\"btn\">\n                    <input type=\"file\" onChange={(event)=>onChangeHandler(event)} id=\"img-input\"/>\n                </div>\n                <p></p>\n                <div className=\"waves-effect waves-light btn\" onClick={formValidation}>Upload form</div>\n                <p></p>\n            </form>\n                <PreviewForm previewData={[name,orgName,empID,mobNo,email,localImgUrl]}/>\n                <Link to=\"/signin\">Already Have an account?</Link>\n        </div>  \n        </div>  \n    )\n}\n\nexport default RegForm;","/home/dhruval/Desktop/Projects/Hackathons/HakerRank/Full-Stack-Hackathon-HackerRank/client/src/components/SuccessPage.js",[],"/home/dhruval/Desktop/Projects/Hackathons/HakerRank/Full-Stack-Hackathon-HackerRank/client/src/components/SignIn.js",["70"],"import {useState,useContext} from 'react';\nimport {Link,useHistory} from 'react-router-dom';\nimport {UserDetailsContext} from \"../App\"\nimport { toast } from 'react-toastify';\n//import 'react-toastify/dist/ReactToastify.css'\ntoast.configure();\n\nfunction SignIn(){\n    const [username, setUsername] = useState(\"\");\n    const [password, setPassword] = useState(\"\");\n    const [load,setLoad] = useState(\"\");\n    const history = useHistory();\n    //destructure the state and dispatch function from context provider's value\n    const {state,dispatch} = useContext(UserDetailsContext)\n\n    function onChangeHandler(event) {\n        if(event.target.name === \"username\"){\n            setUsername(event.target.value);\n        }else if(event.target.name === 'password'){\n            setPassword(event.target.value);\n        }\n    }\n\n    function onClickHandler(event){\n        //prevent default action of reloading\n        event.preventDefault()\n        //debugger;\n        //make a post request to server sign in\n        const reqOptions = {\n            method:\"POST\",\n            headers:{'Content-Type': 'application/json'},\n            body:JSON.stringify({\n                username,\n                password\n            })\n        };\n        console.log(\"Trying to fetch...\")\n        //debugger;\n        fetch(\"/login\",reqOptions).then(res=>{return res.json()}).then((data)=>{\n            console.log(\"Made fetch req and recieved res\")\n            //debugger;\n            //loading\n            setLoad(<div className=\"progress\">\n                        <div className=\"indeterminate\"></div>\n                    </div>)\n            console.log(data);\n            if(data.success){\n                //make a toast with success massage\n                toast.success(data.message);\n\n                //store token and user info present in response in local storage\n                localStorage.setItem(\"jwt\",data.token);\n                console.log(data.user);\n                localStorage.setItem(\"user\",JSON.stringify(data.user));\n                console.log(\"Successfull login.....\")\n\n                //only dispatch is allowed to change state by dispatching action\n                //store user data in redux state\n                dispatch({type:\"SET_USER_DETAILS\",payload:data.user})\n                \n                //navigate user to menu\n                setTimeout(()=>{\n                    history.push('/menu');\n                },1000)\n            }else{\n                //make toast with failure message\n                toast.error(data.message);\n                console.log(data.error + \" : \" + data.message);\n            }\n        });\n    }\n\n    return(\n        <div className=\"container-login\">\n            {load}\n            <h2>Login</h2>\n            <form className=\"login-form\">\n                &nbsp;\n                <div className=\"input-field\">\n                    <input type=\"text\" value ={username} onChange={(event)=>{onChangeHandler(event)}} name=\"username\" placeholder=\"Username\"/>\n                </div>\n                <div className=\"input-field\">\n                    <input type=\"password\" value={password} onChange={(event)=>{onChangeHandler(event)}} name=\"password\" placeholder=\"Password\"/>\n                </div>\n                <div className=\"input-field\">\n                    <button className=\"btn\" onClick={(event)=>onClickHandler(event)}>SignIn</button>\n                </div>\n                <Link to=\"/signup\">Dont have an account?</Link>\n            </form>\n        </div> \n    )\n}\n\nexport default SignIn;\n\n\n/*\n,'Authorization': `Bearer ${localStorage.getItem(\"jwt\")}`\n*/\n\n/*\n1610385286469\n1235\n*/","/home/dhruval/Desktop/Projects/Hackathons/HakerRank/Full-Stack-Hackathon-HackerRank/client/src/components/Menu.js",["71"],"/home/dhruval/Desktop/Projects/Hackathons/HakerRank/Full-Stack-Hackathon-HackerRank/client/src/components/Payment.js",[],"/home/dhruval/Desktop/Projects/Hackathons/HakerRank/Full-Stack-Hackathon-HackerRank/client/src/components/PreviewForm.js",[],"/home/dhruval/Desktop/Projects/Hackathons/HakerRank/Full-Stack-Hackathon-HackerRank/client/src/components/FoodCards/FoodItems.js",["72"],"import React from 'react';\n\nfunction FoodItem(props) {\n  return (\n    \n      <li className='foodItem'>\n        <div className='foodItemContainer'>\n          <figure className='games__item__pic-wrap' price={\"₹\"+props.price}>\n            <img\n              className='games__item__img'\n              src={props.src}\n            />\n          </figure>\n          <div className='games__item__info'>\n            <h5 className='games__item__text'>{props.text}</h5>\n            <div>\n            <button onClick={(event) => {\n              event.preventDefault();\n              props.removeItem(props);\n              }}>-</button>\n            &nbsp;{props.count}&nbsp;\n            <button onClick={(event) => {\n              event.preventDefault();\n              props.addItem(props);\n              }}>+</button>\n            </div>\n            <p>{props.description}</p>\n          </div>\n        </div>\n      </li>\n    \n  );\n}\n\nexport default FoodItem;","/home/dhruval/Desktop/Projects/Hackathons/HakerRank/Full-Stack-Hackathon-HackerRank/client/src/components/FoodCards/FoodCards.js",["73"],"import React, {useContext} from 'react';\nimport './FoodCards.css';\nimport FoodItem from './FoodItems';\n\n\nfunction FoodCards(props) {\n  const map = props.menu.items.map((item,id)=>{\n                return [\n                    <FoodItem\n                      key = {id}\n                      src='/food.jpg'\n                      text={item.name}\n                      description = {item.description}\n                      label='Not spicy'\n                      addItem={props.addItem}\n                      removeItem={props.removeItem}\n                      price={item.price}\n                      count={item.quantity}\n                      category={props.menu.category}\n                    />\n                ]\n          });\n  return (\n    <div className='foodMenu'>      \n      <h3 className=\"menu-category\">{props.menu.category}</h3>\n      <div >      \n          <ul className='foodContainer'>{map}</ul>\n      </div>\n    </div>\n  )\n}\n\nexport default FoodCards;","/home/dhruval/Desktop/Projects/Hackathons/HakerRank/Full-Stack-Hackathon-HackerRank/client/src/components/Routing.js",["74","75"],"import {useEffect,useContext} from 'react';\nimport {Route,Switch,useHistory} from 'react-router-dom';\nimport Menu from './Menu';\nimport SuccessPage from './SuccessPage'\nimport Payment from \"./Payment\";\nimport {UserDetailsContext} from \"../App\"\nimport SignIn from './SignIn';\nimport RegForm from './RegForm';\n\n//render component based on the nav link\nfunction Routing(){\n    //grab dispatch and state from context provider\n    const {state,dispatch} = useContext(UserDetailsContext);\n    const history = useHistory();\n\n    //on mounting of component check if user data already is availabe in localstorage\n    useEffect(() => {\n        //grab user data from localstorage\n        let userDetails = null;\n        if(localStorage.getItem(\"user\") === \"undefined\"){\n            userDetails = null;\n        }else{\n           userDetails = JSON.parse(localStorage.getItem(\"user\"));\n        }\n        //update redux state\n        dispatch({type:\"SET_USER_DETAILS\",payload:userDetails})\n\n        //based on the userData obtained from localstorage\n        if(userDetails === null){\n        //redirect to sign in page\n        history.push('/signin')\n        }\n        else{\n        //redirect to menu\n        history.push('/menu')\n        }\n    }, [])\n\n    return(\n        <Switch>\n            <Route path = \"/signin\" component={SignIn}/>\n            <Route path = '/signup' component={RegForm}/>\n            <Route path = '/successpage/:id/:empid' component={SuccessPage}/>\n            <Route path = \"/menu\" component={Menu}/>\n            <Route path = \"/payment\" component={Payment}/>\n        </Switch>\n    )\n}\n\nexport default Routing","/home/dhruval/Desktop/Projects/Hackathons/HakerRank/Full-Stack-Hackathon-HackerRank/client/src/reducers/userDetailsReducer.js",[],{"ruleId":"76","replacedBy":"77"},{"ruleId":"78","replacedBy":"79"},{"ruleId":"80","severity":1,"message":"81","line":1,"column":29,"nodeType":"82","messageId":"83","endLine":1,"endColumn":39},{"ruleId":"80","severity":1,"message":"84","line":30,"column":12,"nodeType":"82","messageId":"83","endLine":30,"endColumn":19},{"ruleId":"80","severity":1,"message":"85","line":38,"column":12,"nodeType":"82","messageId":"83","endLine":38,"endColumn":17},{"ruleId":"86","severity":1,"message":"87","line":151,"column":7,"nodeType":"88","endLine":151,"endColumn":13,"suggestions":"89"},{"ruleId":"80","severity":1,"message":"85","line":14,"column":12,"nodeType":"82","messageId":"83","endLine":14,"endColumn":17},{"ruleId":"80","severity":1,"message":"90","line":11,"column":14,"nodeType":"82","messageId":"83","endLine":11,"endColumn":29},{"ruleId":"91","severity":1,"message":"92","line":9,"column":13,"nodeType":"93","endLine":12,"endColumn":15},{"ruleId":"80","severity":1,"message":"94","line":1,"column":16,"nodeType":"82","messageId":"83","endLine":1,"endColumn":26},{"ruleId":"80","severity":1,"message":"85","line":13,"column":12,"nodeType":"82","messageId":"83","endLine":13,"endColumn":17},{"ruleId":"86","severity":1,"message":"95","line":37,"column":8,"nodeType":"88","endLine":37,"endColumn":10,"suggestions":"96"},"no-native-reassign",["97"],"no-negated-in-lhs",["98"],"no-unused-vars","'useReducer' is defined but never used.","Identifier","unusedVar","'errMsgs' is assigned a value but never used.","'state' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'cloudinaryUploadPromise', 'dispatch', 'email', 'empID', 'formErrors', 'history', 'mobNo', 'name', 'orgName', and 'valid'. Either include them or remove the dependency array.","ArrayExpression",["99"],"'onChangeHandler' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'useContext' is defined but never used.","React Hook useEffect has missing dependencies: 'dispatch' and 'history'. Either include them or remove the dependency array.",["100"],"no-global-assign","no-unsafe-negation",{"desc":"101","fix":"102"},{"desc":"103","fix":"104"},"Update the dependencies array to be: [cloudinaryUploadPromise, comp, dispatch, email, empID, formErrors, history, mobNo, name, orgName, valid]",{"range":"105","text":"106"},"Update the dependencies array to be: [dispatch, history]",{"range":"107","text":"108"},[7051,7057],"[cloudinaryUploadPromise, comp, dispatch, email, empID, formErrors, history, mobNo, name, orgName, valid]",[1235,1237],"[dispatch, history]"]